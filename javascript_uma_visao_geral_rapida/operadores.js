/**
 * Operadores aritmético
 *
 *  |-------------|--------------------------------------------|
 *  |   Operador  |                                            |
 *  |  aritmético |                  Descrição                 |
 *  |*************|********************************************|
 *  |      +      | Adição                                     |
 *  |-------------|--------------------------------------------|
 *  |      -      | Subtração                                  |
 *  |-------------|--------------------------------------------|
 *  |      *      | Multiplicação                              |
 *  |-------------|--------------------------------------------|
 *  |      /      | Divisão                                    |
 *  |-------------|--------------------------------------------|
 *  |      %      | Módulo (resto de uma operação de diivsão)  |
 *  |-------------|--------------------------------------------|
 *  |      ++     | Incremento                                 |
 *  |-------------|--------------------------------------------|
 *  |      --     | Decremento                                 |
 *  |-------------|--------------------------------------------|
 */

var num = 0;
num = num + 2;
num = num * 3;
num = num / 2;
num++;
num--;

/**
 * Operadores de atribuição
 *
 *  |----------------|-----------------------------------------------------|
 *  |  Operador de   |                                                     |
 *  |  atribuição    |                  Descrição                          |
 *  |****************|*****************************************************|
 *  |       =        | Atribuição                                          |
 *  |----------------|-----------------------------------------------------|
 *  |       +=       | Atribuição de soma (x += y) == (x = x + y)          |
 *  |----------------|-----------------------------------------------------|
 *  |       -=       | Atribuição de subtração (x -= y) == (x = x - y)     |
 *  |----------------|-----------------------------------------------------|
 *  |       *=       | Atribuição de multiplicação (x *= y) == (x = x * y) |
 *  |----------------|-----------------------------------------------------|
 *  |       /=       | Atribuição de divisão (x /= y) == (x = x / y)       |
 *  |----------------|-----------------------------------------------------|
 *  |       %=       | Atribuição de resto (x %= y) == (x = x % y)         |
 *  |----------------|-----------------------------------------------------|
 */

num += 1;
num -= 2;
num *= 3;
num /= 2;
num %= 3;

/**
 * Operadores de comparação
 *
 *  |----------------|-----------------------------------------------------|
 *  |  Operador de   |                                                     |
 *  |  comparação    |                  Descrição                          |
 *  |****************|*****************************************************|
 *  |       ==       | Igual a                                             |
 *  |----------------|-----------------------------------------------------|
 *  |       ===      | Igual a (tanto o valor quanto o tipo do objeto)     |
 *  |----------------|-----------------------------------------------------|
 *  |       !=       | Diferente de                                        |
 *  |----------------|-----------------------------------------------------|
 *  |       !==      | Diferente de (tanto o valor quanto o tipo do objeto)|
 *  |----------------|-----------------------------------------------------|
 *  |       >        | Maior que                                           |
 *  |----------------|-----------------------------------------------------|
 *  |       >=       | Maior ou igual a                                    |
 *  |----------------|-----------------------------------------------------|
 *  |       <        | Menor que                                           |
 *  |----------------|-----------------------------------------------------|
 *  |       <=       | Menor ou igual a                                    |
 *  |----------------|-----------------------------------------------------|
 */

console.log("num == 1 : ", num == 1);
// false

console.log("num === 1 : ", num === 1);
// false

console.log("num != 1 : ", num != 1);
// true

console.log("num !== 1 : ", num !== 1);
// true

console.log("num > 1 : ", num > 1);
// false

console.log("num < 1 : ", num < 1);
// true

console.log("num >= 1 : ", num >= 1);
// false

console.log("num <= 1 : ", num <= 1);
// true

/**
 * Operadores lógicos
 *
 *  |-------------|--------------------------------------------|
 *  |   Operador  |                                            |
 *  |    lógico   |                  Descrição                 |
 *  |*************|********************************************|
 *  |      &&     | E                                          |
 *  |-------------|--------------------------------------------|
 *  |      ||     | Ou                                         |
 *  |-------------|--------------------------------------------|
 *  |      !      | Negação                                    |
 *  |-------------|--------------------------------------------|
 */

console.log("true && false : ", true && false);
// false

console.log("true || false : ", true || false);
// true

console.log("!true : ", !true);
// false

/**
 * Operadores bit a bit
 *
 *  |-------------|--------------------------------------------|
 *  |  Operador   |                                            |
 *  |  bit a bit  |                  Descrição                 |
 *  |*************|********************************************|
 *  |      &      | E                                          |
 *  |-------------|--------------------------------------------|
 *  |      |      | Ou                                         |
 *  |-------------|--------------------------------------------|
 *  |      ~      | Negação                                    |
 *  |-------------|--------------------------------------------|
 *  |      ^      | Ou exclusivo (Xor)                         |
 *  |-------------|--------------------------------------------|
 *  |      <<     | Deslocamento para esquerda (left shift)    |
 *  |-------------|--------------------------------------------|
 *  |      >>     | Deslocamento para direita (right shift)    |
 *  |-------------|--------------------------------------------|
 */

// 5 = 101 e 1 = 1

/**
 *
 * | 00000101 |
 * |   AND    |
 * | 00000001 |
 * |----------|
 * | 00000001 |
 *
 *  1 AND 0 = 0
 *  0 AND 1 = 0
 *  0 AND 0 = 0
 *  1 AND 1 = 1
 */
console.log("5 & 1 : ", 5 & 1);
// 1

/**
 *
 * | 00000101 |
 * |    OR    |
 * | 00000001 |
 * |----------|
 * | 00000101 |
 *
 *  1 OR 0 = 1
 *  0 OR 1 = 1
 *  0 OR 0 = 0
 *  1 OR 1 = 1
 */
console.log("5 | 1 : ", 5 | 1);
// 5

/**
 *
 * | 00000101 |
 * |   NOT    |
 * |----------|
 * | 11111010 |
 *
 *  NOT 1 = 0
 *  NOT 0 = 1
 */
console.log("~ 5 : ", ~5);
// -6

/**
 *
 * | 00000101 |
 * |   XOR    |
 * | 00000001 |
 * |----------|
 * | 00000100 |
 *
 *  1 XOR 0 = 1
 *  0 XOR 1 = 1
 *  0 XOR 0 = 0
 *  1 XOR 1 = 0
 */
console.log("5 ^ 1 : ", 5 ^ 1);
// 4

/**
 * | 00000101 |
 * |   L S    |
 * |----------|
 * | 00001010 |
 */
console.log("5 << 1 : ", 5 << 1);
// 10

/**
 * | 00000101 |
 * |   R S    |
 * |----------|
 * | 00000010 |
 */
console.log("5 >> 1 : ", 5 >> 1);
//2

/**
 * Operador Typeof
 */

console.log("typeof num : ", typeof num);
// number

console.log("typeof Packt : ", typeof "Packt");
// string

console.log("typeof true : ", typeof true);
// boolean

console.log("typeof [1,2,3] : ", typeof [1, 2, 3]);
// object

console.log("typeof { name: 'John' } : ", typeof { name: "John" });
// object

/**
 * Tipos de dados primitivos: null, undefined, string, number, boolean, symbol
 *
 * Tipos de dados derivados/objetos: object (function, array, regex)
 */

// Operador Delete

var myObj = {
  name: "John",
  age: 21,
};

delete myObj.age;

console.log(myObj);
// { name: 'John' }
